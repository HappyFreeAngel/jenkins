FROM jenkins/jenkins:lts-alpine
#这是基础镜像,包含了常见的工具集. 2019.04.22

USER root
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories
ADD software/starter.sh  /devops/
ENV TZ='Asia/Shanghai'

#添加各种常用工具
RUN  apk update &&  apk add --no-cache bash curl git unzip tzdata tree jq lsof bind-tools tcpdump netcat-openbsd sudo sshpass sed vim make gcc \
&& rm -rf /var/cache/apk/*  && echo 'Asia/Shanghai' > /etc/timezone

ADD software  /devops/software
WORKDIR /devops/tools

ARG PYTHON_VERSION=3.6.6
RUN mkdir ~/.pip && cp /devops/software/pip.conf ~/.pip
RUN apk add --update curl python py-pip && rm /var/cache/apk/*

RUN apk add --no-cache python3 && \
    python3 -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    pip3 install --upgrade pip setuptools && \
    if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
    if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
    rm -r /root/.cache

ARG GRADLE_VERSION=5.2.1
RUN mv /devops/software/gradle-${GRADLE_VERSION}-bin.zip /devops/tools/ \
&& cd /devops/tools/ && unzip gradle-${GRADLE_VERSION}-bin.zip && ln -s gradle-${GRADLE_VERSION} gradle && rm -f gradle-${GRADLE_VERSION}-bin.zip

ARG MAVEN_VERSION=3.6.0
#RUN export MAVEN_VERSION=3.6.0 && curl -O  http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz  \
RUN mv /devops/software/apache-maven-${MAVEN_VERSION}-bin.tar.gz /devops/tools/ \
&&  cd /devops/tools  && tar -zxvf apache-maven-${MAVEN_VERSION}-bin.tar.gz  && ln -s apache-maven-${MAVEN_VERSION}  maven && rm -f apache-maven-${MAVEN_VERSION}-bin.tar.gz

VOLUME /devops/workspace
VOLUME /devops/repository/maven
VOLUME /server

#覆盖掉
ADD  software/builder.tgz /devops/tools/
RUN cp /devops/software/settings.xml /devops/tools/maven/conf/
ADD software/tools-env.sh /etc/profile.d/

#各种语言的PATH环境变量
#ENV JAVA_HOME
#ENV PYTHONHOME
ENV GO_HOME=/devops/tools/go
ENV SCALA_HOME=/devops/tools/scala
ENV ANSIBLE_HOME=/devops/tools/ansible

ENV GRADLE_HOME=/devops/tools/gradle
ENV M2_HOME=/devops/tools/maven
ENV BUILDER_HOME=/devops/tools/builder
#PATH搜索顺序是从前到后(左边-->右边)。比较好的习惯是将导出PATH时将新增的路径放在前面
ENV PATH=/devops/workspace/scripts:/devops/workspace/builder/scripts:$BUILDER_HOME/scripts:$PATH:$SCALA_HOME/bin:$GO_HOME/bin:$GRADLE_HOME/bin:$M2_HOME/bin

## 安装python3 ansible software 如果是目录后面需要添加/
#虚拟环境及其激活和正确的使用方式:
ARG ANSIBLE_VERSION=2.7.9
RUN mkdir ansible${ANSIBLE_VERSION}_python${PYTHON_VERSION}  && ln -s ansible${ANSIBLE_VERSION}_python${PYTHON_VERSION} ansible \
&& cd ansible${ANSIBLE_VERSION}_python${PYTHON_VERSION} \
&& curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py \
&& sudo python3 get-pip.py

ARG PYTHON_VERSION=3.6.6
#安装虚拟环境
RUN sudo pip3 install virtualenv \
&& cd ansible${ANSIBLE_VERSION}_python${PYTHON_VERSION} &&  sudo virtualenv -p /usr/bin/python3 venv \
&& source venv/bin/activate

#sudo apk add python2-dev musl-dev  # for python2.x installs
RUN sudo apk add --no-cache python3-dev musl-dev libffi-dev openssl-dev \
    && pip3 install ansible && sudo pip3 install -r /devops/software/requirements.txt  -i https://pypi.tuna.tsinghua.edu.cn/simple

RUN mkdir /run/nginx
STOPSIGNAL SIGTERM

#install openssh server 虚拟环境外面也安装一个ansible
RUN apk update && apk add --no-cache  openssh  nginx openssh-keygen ansible && sudo pip3 install -r /devops/software/requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple

#安装Scala2.12.8
ARG SCALA_VERSION=2.12.8
RUN tar -C /devops/tools/  -xzf /devops/software/scala-${SCALA_VERSION}.tgz && ln -s scala-${SCALA_VERSION} scala

WORKDIR /devops/workspace

EXPOSE 80/tcp 22/tcp 80/tcp 443/tcp 7001/tcp

#添加启动器,可以启动各种程序
ADD software/starter.sh /server/

#添加sshd server
ADD software/run_sshd.sh  /
COPY rootfs  /
#修改默认密码
RUN apk add --no-cache openssh \
  && sed -i s/#PermitRootLogin.*/PermitRootLogin\ yes/ /etc/ssh/sshd_config \
  && echo "root:kaixin.com" | chpasswd \
  && rm -rf /var/cache/apk/*

#清场，打扫垃圾
RUN rm -rf /var/cache/apk/*

# generate host keys if not present
RUN ssh-keygen -A
# do not detach (-D), log to stderr (-e), passthrough other arguments
#RUN exec /usr/sbin/sshd -D -e "$@"

ENTRYPOINT  ["/server/starter.sh", "-D", "FOREGROUND"]


#安装GO语言编译运行环境 需要从源代码编译.
ARG GO_VERSION=1.12.1
##RUN tar -C  /devops/tools/  -xzf  /devops/software/go${GO_VERSION}.linux-amd64.tar.gz

RUN apk add --no-cache \
    ca-certificates

# set up nsswitch.conf for Go's "netgo" implementation
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf

ENV GOLANG_VERSION 1.12.1
COPY software/go1.12.1.src.tar.gz /devops/software/go1.12.1.src.tar.gz
RUN set -eux; \
apk add --no-cache --virtual .build-deps \
    bash \
    gcc \
    musl-dev \
    openssl \
    go \
; \
export \
# set GOROOT_BOOTSTRAP such that we can actually build Go
    GOROOT_BOOTSTRAP="$(go env GOROOT)" \
# ... and set "cross-building" related vars to the installed system's values so that we create a build targeting the proper arch
# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)
    GOOS="$(go env GOOS)" \
    GOARCH="$(go env GOARCH)" \
    GOHOSTOS="$(go env GOHOSTOS)" \
    GOHOSTARCH="$(go env GOHOSTARCH)" \
; \
# also explicitly set GO386 and GOARM if appropriate
# https://github.com/docker-library/golang/issues/184
apkArch="$(apk --print-arch)"; \
case "$apkArch" in \
    armhf) export GOARM='6' ;; \
    x86) export GO386='387' ;; \
esac; \
\
mv /devops/software/go1.12.1.src.tar.gz  go.tgz; \
echo '0be127684df4b842a64e58093154f9d15422f1405f1fcff4b2c36ffc6a15818a *go.tgz' | sha256sum -c -; \
tar -C /devops/tools/ -xzf go.tgz; \
rm go.tgz; \
\
cd /devops/tools/go/src; \
./make.bash; \
\
rm -rf \
# https://github.com/golang/go/blob/0b30cf534a03618162d3015c8705dd2231e34703/src/cmd/dist/buildtool.go#L121-L125
    /devops/tools/go/pkg/bootstrap \
# https://golang.org/cl/82095
# https://github.com/golang/build/blob/e3fe1605c30f6a3fd136b561569933312ede8782/cmd/release/releaselet.go#L56
    /devops/tools/go/pkg/obj \
; \
apk del .build-deps; \
\
export PATH="/devops/tools/go/bin:$PATH"; \
go version

ENV GOPATH /go
ENV PATH $GOPATH/bin:/devops/tools/go/bin:$PATH

RUN mkdir -p "$GOPATH/src" "$GOPATH/bin" && chmod -R 777 "$GOPATH"


## 安装node8环境
ENV NODE_VERSION 8.15.1

RUN addgroup -g 1050 node \
    && adduser -u 1050 -G node -s /bin/sh -D node \
    && apk add --no-cache \
        libstdc++ \
    && apk add --no-cache --virtual .build-deps \
        binutils-gold \
        curl \
        g++ \
        gcc \
        gnupg \
        libgcc \
        linux-headers \
        make \
        python \
  # gpg keys listed at https://github.com/nodejs/node#release-keys
  && for key in \
    94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
    FD3A5288F042B6850C66B31F09FE44734EB7990E \
    71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
    DD8F2338BAE7501E3DD5AC78C273792F7D83545D \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    B9AE9905FFD7803F25714661B63B535A4C206CA9 \
    77984A986EBC2AA786BC0F66B01FBB92821C587A \
    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
    4ED778F539E3634C779C87C6D7062848A1AB005C \
    A48C2BEE680E841632CD4E44F07496B3EB3C1762 \
    B9E2F5981AA6E0CD28160D9FF13993A75599653C \
  ; do \
    gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
    gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
    gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
  done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && grep " node-v$NODE_VERSION.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xf "node-v$NODE_VERSION.tar.xz" \
    && cd "node-v$NODE_VERSION" \
    && ./configure \
    && make -j$(getconf _NPROCESSORS_ONLN) \
    && make install \
    && apk del .build-deps \
    && cd .. \
    && rm -Rf "node-v$NODE_VERSION" \
    && rm "node-v$NODE_VERSION.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt

ENV YARN_VERSION 1.12.3

RUN apk add --no-cache --virtual .build-deps-yarn curl gnupg tar \
  && for key in \
    6A010C5166006599AA17F08146C2130DFD2497F5 \
  ; do \
    gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys "$key" || \
    gpg --batch --keyserver hkp://ipv4.pool.sks-keyservers.net --recv-keys "$key" || \
    gpg --batch --keyserver hkp://pgp.mit.edu:80 --recv-keys "$key" ; \
  done \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz" \
  && curl -fsSLO --compressed "https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v$YARN_VERSION.tar.gz.asc" \
  && gpg --batch --verify yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && mkdir -p /opt \
  && tar -xzf yarn-v$YARN_VERSION.tar.gz -C /opt/ \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarn /usr/local/bin/yarn \
  && ln -s /opt/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/yarnpkg \
  && rm yarn-v$YARN_VERSION.tar.gz.asc yarn-v$YARN_VERSION.tar.gz \
  && apk del .build-deps-yarn



#安装docker工具
RUN apk add docker --no-cache openrc python-dev libffi-dev openssl-dev gcc libc-dev make \
&& pip install docker-compose \
&& rc-update add docker boot \
&& rm -rf /var/cache/apk/*

#RUN adduser -SDHs /sbin/nologin dockremap \
#&& addgroup -S dockremap \
#&& echo dockremap:$(cat /etc/passwd|grep dockremap|cut -d: -f3):65536 >> /etc/subuid \
#&& echo dockremap:$(cat /etc/passwd|grep dockremap|cut -d: -f4):65536 >> /etc/subgid

#rc-update add docker boot
#service docker start

#安装builder工具包
ADD  software/builder.tgz /devops/tools/

RUN echo "jenkins ALL=NOPASSWD: ALL" >> /etc/sudoers

#ENTRYPOINT  ["/server/starter.sh", "-D", "FOREGROUND"]
#USER jenkins

#bugfix 覆盖原来的配置.
ADD software/settings.xml  /devops/tools/maven/conf/
#更改默认的插件下载地址
ADD software/hudson.model.UpdateCenter.xml  /var/jenkins_home/

USER root
ENTRYPOINT  ["/server/starter.sh", "-D", "FOREGROUND"]

#USER jenkins
# Here you can install some Jenkins plugins if you want